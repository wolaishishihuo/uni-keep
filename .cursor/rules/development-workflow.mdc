---
description: 
globs: 
alwaysApply: true
---
# 项目开发流程规范

## 开发环境要求

### Node.js 版本
- **要求**: Node.js >= 18
- **推荐**: 使用 Node.js 20 LTS
- **包管理**: 必须使用 pnpm >= 7.30

### 开发工具
- **编辑器**: VS Code + Cursor
- **浏览器**: Chrome (开发调试)
- **小程序工具**: 微信开发者工具
- **App 调试**: HBuilderX

## 项目初始化

### 1. 环境安装
```bash
# 安装 Node.js 和 pnpm
npm install -g pnpm

# 克隆项目
git clone [repository-url]
cd uni-keep

# 安装依赖
pnpm install
```

### 2. 环境配置
- 复制 [env/](mdc:env) 目录下的环境配置文件
- 配置开发环境变量
- 设置 API 接口地址

## 开发流程

### 1. 分支管理

```
main         # 主分支，生产环境
├── develop  # 开发分支
├── feature/ # 功能分支
├── hotfix/  # 紧急修复分支
└── release/ # 发布分支
```

### 2. 功能开发流程

1. **创建功能分支**
   ```bash
   git checkout develop
   git pull origin develop
   git checkout -b feature/your-feature-name
   ```

2. **开发功能**
   - 按照 [vue3-vite-h5-company-standards.mdc](mdc:.cursor/rules/vue3-vite-h5-company-standards.mdc) 规范开发
   - 编写单元测试
   - 确保代码通过 ESLint 检查

3. **提交代码**
   ```bash
   git add .
   git commit -m "feat: add new feature description"
   ```

4. **合并到开发分支**
   ```bash
   git checkout develop
   git merge feature/your-feature-name
   git push origin develop
   ```

## 代码提交规范

### Commit Message 格式

```
<type>(<scope>): <subject>

<body>

<footer>
```

### 类型说明
- `feat` - 新功能
- `fix` - 修复 bug
- `docs` - 文档更新
- `style` - 代码格式化（不影响代码运行）
- `refactor` - 重构代码
- `test` - 增加测试
- `chore` - 构建过程或辅助工具的变动
- `perf` - 性能优化
- `ci` - CI/CD 相关变更
- `build` - 构建系统相关变更
- `revert` - 回滚提交

### 示例
```bash
feat(user): add user profile page
fix(api): fix login request timeout issue
docs: update README installation guide
```

## 代码审查

### 审查要点
1. **功能完整性** - 功能是否按需求实现
2. **代码质量** - 是否遵循编码规范
3. **性能优化** - 是否考虑性能影响
4. **安全性** - 是否存在安全隐患
5. **兼容性** - 多端兼容性是否考虑
6. **测试覆盖** - 是否包含必要测试

### 审查流程
1. 创建 Pull Request
2. 指定审查人员
3. 运行自动化检查
4. 手动代码审查
5. 修复问题后合并

## 测试规范

### 单元测试
- 使用 Vitest 进行单元测试
- 工具函数必须有测试覆盖
- 关键业务逻辑必须有测试

### 集成测试
- API 接口测试
- 组件集成测试
- 端到端测试

### 测试命令
```bash
pnpm test              # 运行所有测试
pnpm test:unit         # 运行单元测试
pnpm test:coverage     # 生成测试覆盖率报告
```

## 构建和部署

### 开发环境
```bash
pnpm dev               # H5 开发服务器
pnpm dev:mp-weixin     # 微信小程序开发
pnpm dev:app           # App 开发
```

### 生产构建
```bash
pnpm build             # H5 生产构建
pnpm build:mp-weixin   # 微信小程序构建
pnpm build:app         # App 构建
```

### 部署流程
1. **测试环境部署**
   - develop 分支自动部署到测试环境
   - 进行功能测试和回归测试

2. **预发布环境**
   - release 分支部署到预发布环境
   - 进行上线前最终测试

3. **生产环境**
   - main 分支部署到生产环境
   - 监控应用运行状态

## 版本管理

### 版本号规则
遵循 [Semantic Versioning](mdc:https:/semver.org) 规范：
- `MAJOR.MINOR.PATCH`
- `1.0.0` - 主版本.次版本.修订版本

### 发布流程
1. 创建 release 分支
2. 更新版本号和变更日志
3. 测试验证
4. 合并到 main 分支
5. 创建 Git Tag
6. 发布到生产环境

## 性能监控

### 关键指标
- **首屏加载时间** - < 3s
- **页面切换时间** - < 500ms
- **内存使用** - 合理范围内
- **包体积** - 主包 < 2MB

### 监控工具
- 小程序性能监控
- H5 性能监控
- 错误日志监控

## 协作规范

### 沟通方式
- **需求讨论** - 文档记录
- **技术方案** - 技术评审
- **问题反馈** - Issue 追踪
- **进度同步** - 定期会议

### 文档维护
- API 文档及时更新
- 组件文档完善
- 部署文档详细
- 故障处理文档

## 应急处理

### 线上问题处理
1. **问题发现** - 监控告警或用户反馈
2. **快速定位** - 查看日志和监控数据
3. **临时处理** - 紧急修复或回滚
4. **根本解决** - 分析原因并修复
5. **总结复盘** - 问题分析和改进

### 紧急发布流程
1. 创建 hotfix 分支
2. 快速修复问题
3. 测试验证
4. 直接合并到 main
5. 同步到 develop 分支

## 质量保证

### 代码质量检查
- ESLint 规则检查
- TypeScript 类型检查
- 代码格式化检查
- 提交消息规范检查

### 自动化检查
- 预提交检查 (husky + lint-staged)
- CI/CD 流水线检查
- 自动化测试运行
- 构建成功验证

## 最佳实践

1. **小步快跑** - 功能拆分，快速迭代
2. **持续集成** - 频繁集成，及时发现问题
3. **文档先行** - 先写文档，再写代码
4. **测试驱动** - 先写测试，再写实现
5. **代码审查** - 所有变更必须经过审查
6. **性能优先** - 始终关注性能影响
7. **用户体验** - 站在用户角度思考问题
